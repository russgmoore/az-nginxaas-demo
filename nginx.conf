user nginx;
worker_processes auto;
worker_rlimit_nofile 8192;
pid /run/nginx/nginx.pid;

events {
    worker_connections 4000;
}

error_log /var/log/nginx/error.log error;


http {
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    # Log True-Client-IP header
    log_format true_client_ip '$remote_addr - $http_true_client_ip';

    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/true_client_ip.log true_client_ip;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    upstream echo {
        zone upstream_echo 64k;
        hash $cookie_session_id consistent;
        server 10.0.1.10:80 fail_timeout=2;
        server 10.0.1.11:80 fail_timeout=2;
        sticky cookie x-vf-srv expires=1h path=/;
    }
    match server-ready {
        status 200;
        body ~ "VF-ReadytoServe";
    }

    #upstream server pool for hurra
    upstream ad-analytics {
        server ad.domain.com:443;
    }
    #upstream server pool for default
    upstream default {
        server 10.0.1.10:80;
        server 10.0.1.11:80;
    }
    # Preparations for iRule 2 
    # $header_x_xss_protection set if X-XSS-Protection does not exist
    map $upstream_http_x_xss_protection $header_x_xss_protection {
        '' "1; mode=block";
    }

    # $header_x_content_type_options set if X-Content-Type-Options does not exist
    map $upstream_http_x_content_type_options $header_x_content_type_options {
        '' "nosniff";
    }

    # $header_strict_transport_security set if Strict-Transport-Security does not exist
    map $upstream_http_strict_transport_security $header_strict_transport_security {
        '' "max-age=63072000";
    }

    #set the cache control expiration headers for content iRule 5
    map $sent_http_content_type $expires {
        default                    off;
        image/jpg                   5y;
        image/png                   5y;
        image/gif                   5y;
        image/x-icon                5y;
        text/javascript             5y;
        application/javascript      5y;
        "text/javascript; charset=utf-8" 5y;
        application/octet-stream    5y;
        application/font-woff       5y;
        application/font-woff2      5y;
        video/mp4                   5y;
        video/ogg                   5y;
        ~font/                      5y;
        ~image/svg                  5y;
        text/css                    5y;
        "text/ccs; charset=utf-8"   5y; 
    }

    # we want to block requests that have these IPs in the X-Forwarded-For header iRule 49
    map $http_x_forwarded_for $blockip {
        205.164.60.94         1;
        173.16.179.218        1;
        2600:1005:b0b9:d089:137:6f82:3714:1ec9 1;
    }


    server {
        listen 80;
        expires $expires;

        location /hc_scripts {
            # this combined with the x-forwarded-for map will return 410 to matching IPs, iRules 49 in last files sent by customer
            if ($blockip) { return 410; }
            proxy_pass http://echo/;
            # These will be added to the response headers if they don't exist iRule 2
            add_header Strict-Transport-Security $header_strict_transport_security;
            add_header X-Content-Type-Options $header_x_content_type_options;
            add_header X-Xss-Protection $header_x_xss_protection;

            #Set cookie as secure if it exist iRule 4
            proxy_cookie_flags ~^OpenIdConnect\.nonce\..* secure, httponly;

            # insert headers needed for iRule 1
            proxy_set_header X-Hurra-Client-IP $http_true_client_ip;
            proxy_set_header X-Hurra-Proxy-Domain www.COMPANY.com;
            proxy_set_header X-Hurra-Proxy-Path /hc_scripts;

            # Eliminate headers toward client from servers. The "Server" header is hidden by default
            # but listed below for completness iRule 3
            proxy_hide_header Server;
            proxy_hide_header X-Powered-By;
            proxy_hide_header x-aspnetmvc-version;
        }

        location / {
            # block requests from certain ips found in x-forwarded-for
            if ($blockip) { return 410; }
            # set the upstream pool for this location
            proxy_pass http://echo;
            # enable healthchecks to get health check file. This health check must pass and we will persist the state over reload
            health_check uri=/healthz.html match=server-ready mandatory persistent;
            # These will be added to the response headers if they don't exist iRule 2
            add_header Strict-Transport-Security $header_strict_transport_security;
            add_header X-Content-Type-Options $header_x_content_type_options;
            add_header X-Xss-Protection $header_x_xss_protection;

            #Set cookie as secure if it exist iRule 4
            proxy_cookie_flags ~^OpenIdConnect\.nonce\..* secure, httponly;

            # Eliminate headers toward client from servers. The "Server" header is hidden by default
            # but listed below for completness iRule 3
            proxy_hide_header Server;
            proxy_hide_header X-Powered-By;
            proxy_hide_header x-aspnetmvc-version;
        }
    }
}